// Code generated by MockGen. DO NOT EDIT.
// Source: cloudsidecar/pkg/aws/handler/kinesis (interfaces: GCPClient)

// Package kinesis is a generated GoMock package.
package kinesis

import (
	pubsub "cloud.google.com/go/pubsub"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGCPClient is a mock of GCPClient interface
type MockGCPClient struct {
	ctrl     *gomock.Controller
	recorder *MockGCPClientMockRecorder
}

// MockGCPClientMockRecorder is the mock recorder for MockGCPClient
type MockGCPClientMockRecorder struct {
	mock *MockGCPClient
}

// NewMockGCPClient creates a new mock instance
func NewMockGCPClient(ctrl *gomock.Controller) *MockGCPClient {
	mock := &MockGCPClient{ctrl: ctrl}
	mock.recorder = &MockGCPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGCPClient) EXPECT() *MockGCPClientMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockGCPClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockGCPClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGCPClient)(nil).Close))
}

// CreateSubscription mocks base method
func (m *MockGCPClient) CreateSubscription(arg0 context.Context, arg1 string, arg2 pubsub.SubscriptionConfig) (*pubsub.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", arg0, arg1, arg2)
	ret0, _ := ret[0].(*pubsub.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription
func (mr *MockGCPClientMockRecorder) CreateSubscription(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockGCPClient)(nil).CreateSubscription), arg0, arg1, arg2)
}

// CreateTopic mocks base method
func (m *MockGCPClient) CreateTopic(arg0 context.Context, arg1 string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", arg0, arg1)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic
func (mr *MockGCPClientMockRecorder) CreateTopic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockGCPClient)(nil).CreateTopic), arg0, arg1)
}

// Subscription mocks base method
func (m *MockGCPClient) Subscription(arg0 string) *pubsub.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", arg0)
	ret0, _ := ret[0].(*pubsub.Subscription)
	return ret0
}

// Subscription indicates an expected call of Subscription
func (mr *MockGCPClientMockRecorder) Subscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockGCPClient)(nil).Subscription), arg0)
}

// Topic mocks base method
func (m *MockGCPClient) Topic(arg0 string) *pubsub.Topic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Topic", arg0)
	ret0, _ := ret[0].(*pubsub.Topic)
	return ret0
}

// Topic indicates an expected call of Topic
func (mr *MockGCPClientMockRecorder) Topic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Topic", reflect.TypeOf((*MockGCPClient)(nil).Topic), arg0)
}
